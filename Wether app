Write a complete responsive code of Weather Forecasting App: Integrate with a weather API to display weather forecasts for different locations. html with JS 


Creating a complete responsive Weather Forecasting App involves HTML, CSS, and JavaScript code. To integrate with a weather API, we'll use a free API from OpenWeatherMap. Make sure to sign up for a free account to get an API key. Below is a basic example of the app:

HTML

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast App</title>
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="container">
        <h1>Weather Forecast App</h1>
        <div class="location-input">
            <input type="text" id="location" placeholder="Enter Location">
            <button onclick="getWeather()">Get Weather</button>
        </div>
        <div class="weather-info" id="weatherInfo">
            <!-- Weather information will be displayed here -->
        </div>
    </div>

    <script src="script.js"></script>
</body>

</html>
css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

h1 {
    text-align: center;
}

.location-input {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

input[type="text"] {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px 0 0 5px;
}

button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
}

.weather-info {
    text-align: center;
}


JavaScript

// Replace 'YOUR_API_KEY' with your actual API key from OpenWeatherMap
const apiKey = 'YOUR_API_KEY';

async function getWeather() {
    const locationInput = document.getElementById('location').value;
    if (!locationInput) {
        alert('Please enter a valid location.');
        return;
    }

    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${locationInput}&units=metric&appid=${apiKey}`);
        const data = await response.json();

        if (data.cod === '404') {
            alert('Location not found. Please try again.');
            return;
        }

        displayWeather(data);
    } catch (error) {
        alert('An error occurred while fetching weather data.');
        console.error(error);
    }
}

function displayWeather(data) {
    const weatherInfoElement = document.getElementById('weatherInfo');
    weatherInfoElement.innerHTML = `
        <h2>${data.name}, ${data.sys.country}</h2>
        <p>Weather: ${data.weather[0].main}</p>
        <p>Temperature: ${data.main.temp} &#8451;</p>
        <p>Humidity: ${data.main.humidity}%</p>
        <p>Wind Speed: ${data.wind.speed} m/s</p>
    `;
}

In this example, we have a simple form with an input field and a button to allow users to enter a location. When the "Get Weather" button is clicked, the getWeather() function is called, which fetches weather data from the OpenWeatherMap API based on the entered location. If the location is not found or an error occurs during the API call, appropriate messages are displayed to the user.

Remember to replace 'YOUR_API_KEY' with your actual API key from OpenWeatherMap before using this code.

Note: As of my knowledge cutoff in September 2021, the code provided should work well. However, it's always good to check for any changes or updates in the APIs or libraries you are using to ensure compatibility.
