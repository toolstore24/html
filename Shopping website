Write a complete responsive code of E-Commerce Website: Build an online store where users can browse and purchase products. html with JS 


Creating a complete responsive E-Commerce website involves multiple components, and it would be quite extensive to provide a fully functional code here. However, I can give you a simplified example of an E-Commerce website with HTML and JavaScript that demonstrates the basic structure and functionality for browsing and purchasing products. This example uses plain JavaScript without any frameworks or libraries.

Note: This example is for educational purposes and may not include all security measures needed for a real-world E-Commerce website. Also, this code does not handle real payments; it only simulates the process.

HTML Structure:

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My E-Commerce Store</title>
  <link rel="stylesheet" href="styles.css">
</head>

<body>
  <header>
    <h1>My E-Commerce Store</h1>
    <div id="cart">
      <span id="cart-count">0</span>
      <button id="view-cart-btn">View Cart</button>
    </div>
  </header>

  <main>
    <div id="product-list">
      <!-- Product cards will be dynamically added here -->
    </div>
  </main>

  <div id="cart-modal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Shopping Cart</h2>
      <div id="cart-items">
        <!-- Cart items will be dynamically added here -->
      </div>
      <div id="total">Total: $0</div>
      <button id="checkout-btn">Checkout</button>
    </div>
  </div>

  <script src="script.js"></script>
</body>

</html>



JavaScript


// Sample product data
const products = [
  { id: 1, name: 'Product 1', price: 10.99 },
  { id: 2, name: 'Product 2', price: 24.99 },
  // Add more products here
];

const cartItems = [];

function displayProducts() {
  const productList = document.getElementById('product-list');
  productList.innerHTML = '';

  products.forEach(product => {
    const card = document.createElement('div');
    card.classList.add('product-card');
    card.innerHTML = `
      <h3>${product.name}</h3>
      <p>$${product.price}</p>
      <button onclick="addToCart(${product.id})">Add to Cart</button>
    `;
    productList.appendChild(card);
  });
}

function addToCart(productId) {
  const product = products.find(p => p.id === productId);
  cartItems.push(product);
  updateCartCount();
}

function updateCartCount() {
  const cartCount = document.getElementById('cart-count');
  cartCount.textContent = cartItems.length;
}

function displayCartItems() {
  const cartModal = document.getElementById('cart-modal');
  const cartItemsDiv = document.getElementById('cart-items');
  cartItemsDiv.innerHTML = '';

  let total = 0;

  cartItems.forEach(item => {
    const cartItem = document.createElement('div');
    cartItem.classList.add('cart-item');
    cartItem.innerHTML = `
      <span>${item.name}</span>
      <span>$${item.price}</span>
    `;
    total += item.price;
    cartItemsDiv.appendChild(cartItem);
  });

  const totalDiv = document.getElementById('total');
  totalDiv.textContent = `Total: $${total.toFixed(2)}`;

  cartModal.style.display = 'block';
}

function closeCartModal() {
  const cartModal = document.getElementById('cart-modal');
  cartModal.style.display = 'none';
}

function checkout() {
  // Simulate a checkout process (you can implement the actual payment process here)
  alert('Thank you for your purchase!');
  cartItems.length = 0;
  updateCartCount();
  closeCartModal();
}

// Event Listeners
document.getElementById('view-cart-btn').addEventListener('click', displayCartItems);
document.querySelector('.close').addEventListener('click', closeCartModal);
document.getElementById('checkout-btn').addEventListener('click', checkout);

// Initial setup
displayProducts();

This code provides a basic E-Commerce website where users can browse products, add them to the cart, view the cart, and simulate a checkout process. The styling is not provided in this example (styles.css), but you can add your custom CSS to make the website visually appealing.

Remember that a real-world E-Commerce website would require server-side code, a database, user authentication, and more robust security measures to handle transactions and sensitive data. This example focuses on the front-end implementation using HTML and plain JavaScript.
