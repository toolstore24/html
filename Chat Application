Building a complete real-time chat application requires more than just HTML and JavaScript. To achieve real-time functionality, you'll need to use a server-side technology like Node.js and a WebSocket library like Socket.io to enable real-time communication between clients. However, I'll provide you with a basic example that showcases the frontend part using HTML, CSS, and JavaScript. Please note that this example won't include actual real-time functionality without a server-side component, but it will give you a starting point to build upon.

Here's the code for the frontend part of the chat application:

index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Chat Application</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>Real-time Chat Application</h1>
        </div>
        <div class="chat-messages" id="chatMessages"></div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button id="sendButton">Send</button>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>


css


body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.chat-container {
    max-width: 600px;
    margin: 50px auto;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

.chat-header {
    text-align: center;
    margin-bottom: 20px;
}

.chat-messages {
    height: 300px;
    overflow-y: scroll;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
}

.chat-input {
    display: flex;
}

.chat-input input {
    flex: 1;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 3px;
    margin-right: 5px;
}

.chat-input button {
    padding: 5px 10px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

.chat-input button:hover {
    background-color: #0056b3;
}


js
// Replace 'YOUR_SERVER_URL' with the actual server URL when you have one.
const serverUrl = 'YOUR_SERVER_URL';

const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');

// Function to append a new message to the chat container.
function appendMessage(sender, message) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message');
    messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Function to handle sending a message.
function sendMessage() {
    const message = messageInput.value.trim();
    if (message !== '') {
        // In a real application, you would send the message to the server using a WebSocket or AJAX call.
        // For this example, we'll just append the message locally.
        appendMessage('You', message);
        messageInput.value = '';
    }
}

sendButton.addEventListener('click', sendMessage);

messageInput.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
        sendMessage();
    }
});

