Designing a complete banking application with account management, transactions, and balance tracking requires more than just HTML and JavaScript. It involves backend server-side logic and database management. For the sake of this example, I will provide a simplified front-end code using HTML, CSS, and JavaScript to demonstrate the user interface. Keep in mind that in a real-world application, you would need to implement the backend server, handle authentication, and ensure secure transaction processing.

Let's create a simple HTML page with embedded JavaScript to showcase the banking application:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Banking Application</title>
  <style>
    /* Add your CSS styles here for responsive design */
    body {
      font-family: Arial, sans-serif;
    }
    /* Add more CSS styles as needed */
  </style>
</head>
<body>
  <h1>Welcome to Our Banking Application</h1>

  <div id="balanceDisplay">
    <h2>Account Balance:</h2>
    <p id="balance">0.00</p>
  </div>

  <div id="transactionForm">
    <h2>Make a Transaction</h2>
    <label for="amount">Amount:</label>
    <input type="number" id="amount" step="0.01" min="0" required>
    <label for="type">Transaction Type:</label>
    <select id="type" required>
      <option value="deposit">Deposit</option>
      <option value="withdraw">Withdraw</option>
    </select>
    <button onclick="performTransaction()">Submit</button>
  </div>

  <script>
    // Dummy account balance variable (in real-world app, this would be fetched from the server)
    let accountBalance = 1000.00;

    // Function to display the current balance
    function displayBalance() {
      const balanceElement = document.getElementById('balance');
      balanceElement.textContent = accountBalance.toFixed(2);
    }

    // Function to perform a transaction
    function performTransaction() {
      const amount = parseFloat(document.getElementById('amount').value);
      const transactionType = document.getElementById('type').value;

      if (transactionType === 'deposit') {
        accountBalance += amount;
      } else if (transactionType === 'withdraw') {
        if (amount <= accountBalance) {
          accountBalance -= amount;
        } else {
          alert("Insufficient balance!");
        }
      }

      // Display the updated balance
      displayBalance();
    }

    // Display the initial balance
    displayBalance();
  </script>
</body>
</html>
